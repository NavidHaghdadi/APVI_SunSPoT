# ---------- Preparing inputs for **TESTING** -----------
import pandas as pd
import requests
import os
import json
from saving_estimator import saving_est   # here we only import to test this function


# ---------- Test the function saving estimator: ------------

# Preparing the Load profile (kWh) - in the website this will be generated by the load_profile_estimator.py but here for
# testing we use a profile from api.ceem.org.au
LP = requests.get('http://api.ceem.org.au/LoadProfiles/Avg')
LP = LP.json()
df = pd.DataFrame.from_dict(LP, orient='columns')
df['TS'] = pd.to_datetime(df['TS'], unit='ms')
df = df[['TS', 'Load']]
load_profile = df.copy()

# PV Profile (kWh) - this file is the output of Jessie's functions - here we use a sample PV profile from excel file
cwd = os.getcwd()
pv_profile = pd.read_csv(os.path.join(cwd, "PVProfile_Example.csv"))
pv_profile['TS'] = pd.to_datetime(pv_profile['TS'],format='%d/%m/%Y %H:%M')

# Tariff - this will be selected by used from a list of tariffs in the dropdown list here we use a sample for testing
Tariff_name = "Origin Flat Rate NSW (Endeavour area)"
Tariff_name = "Power Direct TOU NSW"

all_tariffs = requests.get('http://api.ceem.org.au/elec-tariffs/retail')
all_tariffs = all_tariffs.json()
for i in range(len(all_tariffs)):
    if all_tariffs[i]['Name'] == Tariff_name:
        selected_tariff = all_tariffs[i]

# Testing the function for estimating saving (saving_est.py)
pv_size_kw=1  # 3 kW

user_inputs = json.load(open('user_inputs_Example.json'))

battery_kW=5
battery_kWh=5
distributor='Ausgrid'
saving_est(user_inputs, pv_profile, selected_tariff,pv_size_kw,battery_kW,battery_kWh,distributor)